// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Borrador.Entities;
using Microsoft.EntityFrameworkCore;

namespace Borrador.Context;

public partial class Biblio_dbContext : DbContext
{
    public Biblio_dbContext(DbContextOptions<Biblio_dbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Autore> Autores { get; set; }

    public virtual DbSet<Categoria> Categorias { get; set; }

    public virtual DbSet<Estado> Estados { get; set; }

    public virtual DbSet<Libro> Libros { get; set; }

    public virtual DbSet<Prestamo> Prestamos { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Autore>(entity =>
        {
            entity.HasKey(e => e.IdAutor);

            entity.ToTable("Autores", "Core");

            entity.Property(e => e.IdAutor)
                .HasComment("Identificador unico de los Autores que se registren.")
                .HasColumnName("id_Autor");
            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Apellido del Autor que se registre.");
            entity.Property(e => e.Elimino)
                .HasComment("Atributo booleano que indicara si un registro este eliminado o no.")
                .HasColumnName("elimino");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Atributo de auditoria que registrara la fecha en la que se cree un registro.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");
            entity.Property(e => e.FechaElim)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea eliminado (de forma lógica).")
                .HasColumnType("datetime")
                .HasColumnName("fecha_elim");
            entity.Property(e => e.FechaMod)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea modificado.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_mod");
            entity.Property(e => e.Nacionalidad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nacionalidad del Autor que se registre.");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de los Autores que se registren.");
            entity.Property(e => e.UsuarioCreacionId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que cree un registro.")
                .HasColumnName("usuario_creacion_id");
            entity.Property(e => e.UsuarioElimId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que haya eliminado un registro de esta tabla.")
                .HasColumnName("usuario_elim_id");
            entity.Property(e => e.UsuarioMod)
                .HasComment("Atributo de auditoria que registrara que usuario por su id que modifique un registro.")
                .HasColumnName("usuario_mod");

            entity.HasOne(d => d.UsuarioCreacion).WithMany(p => p.AutoreUsuarioCreacions)
                .HasForeignKey(d => d.UsuarioCreacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Autores_UsuarioCreacionId");

            entity.HasOne(d => d.UsuarioElim).WithMany(p => p.AutoreUsuarioElims)
                .HasForeignKey(d => d.UsuarioElimId)
                .HasConstraintName("FK_Autores_UsuarioElimId");
        });

        modelBuilder.Entity<Categoria>(entity =>
        {
            entity.HasKey(e => e.IdCategoria);

            entity.ToTable("Categorias", "Core");

            entity.Property(e => e.IdCategoria)
                .HasComment("Identificador unicos de las categorias.")
                .HasColumnName("id_Categoria");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Descripcion que detalle brevemente la categoria registrada (opcional).");
            entity.Property(e => e.Elimino)
                .HasComment("Atributo booleano que indicara si un registro este eliminado o no.")
                .HasColumnName("elimino");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Atributo de auditoria que registrara la fecha en la que se cree un registro.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");
            entity.Property(e => e.FechaElim)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea eliminado (de forma lógica).")
                .HasColumnType("datetime")
                .HasColumnName("fecha_elim");
            entity.Property(e => e.FechaMod)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea modificado.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_mod");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la categoria registrada.");
            entity.Property(e => e.UsuarioCreacionId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que cree un registro.")
                .HasColumnName("usuario_creacion_id");
            entity.Property(e => e.UsuarioElimId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que haya eliminado un registro de esta tabla.")
                .HasColumnName("usuario_elim_id");
            entity.Property(e => e.UsuarioMod)
                .HasComment("Atributo de auditoria que registrara que usuario por su id que modifique un registro.")
                .HasColumnName("usuario_mod");

            entity.HasOne(d => d.UsuarioCreacion).WithMany(p => p.CategoriaUsuarioCreacions)
                .HasForeignKey(d => d.UsuarioCreacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Categorias_UsuarioCreacionId");

            entity.HasOne(d => d.UsuarioElim).WithMany(p => p.CategoriaUsuarioElims)
                .HasForeignKey(d => d.UsuarioElimId)
                .HasConstraintName("FK_Categorias_UsuarioElimId");
        });

        modelBuilder.Entity<Estado>(entity =>
        {
            entity.HasKey(e => e.IdEstado);

            entity.ToTable("Estados", "Core");

            entity.Property(e => e.IdEstado)
                .HasComment("Identificador unico de los estados que esten registrados en esta tabla.")
                .HasColumnName("id_Estado");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Campo de descripcion donde explicar brevemente que hara el estado que se registre.");
            entity.Property(e => e.Elimino)
                .HasComment("Atributo booleano que indicara si un registro este eliminado o no.")
                .HasColumnName("elimino");
            entity.Property(e => e.Estado1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del estado que se registre (PENDIENTE, APROBADO, PRESTADO, etc).")
                .HasColumnName("Estado");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Atributo de auditoria que registrara la fecha en la que se cree un registro.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");
            entity.Property(e => e.FechaElim)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea eliminado (de forma lógica).")
                .HasColumnType("datetime")
                .HasColumnName("fecha_elim");
            entity.Property(e => e.FechaMod)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea modificado.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_mod");
            entity.Property(e => e.UsuarioCreacionId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que cree un registro.")
                .HasColumnName("usuario_creacion_id");
            entity.Property(e => e.UsuarioElimId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que haya eliminado un registro de esta tabla.")
                .HasColumnName("usuario_elim_id");
            entity.Property(e => e.UsuarioMod)
                .HasComment("Atributo de auditoria que registrara que usuario por su id que modifique un registro.")
                .HasColumnName("usuario_mod");

            entity.HasOne(d => d.UsuarioCreacion).WithMany(p => p.EstadoUsuarioCreacions)
                .HasForeignKey(d => d.UsuarioCreacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Estados_UsuarioCreacionId");

            entity.HasOne(d => d.UsuarioElim).WithMany(p => p.EstadoUsuarioElims)
                .HasForeignKey(d => d.UsuarioElimId)
                .HasConstraintName("FK_Estados_UsuarioElimId");
        });

        modelBuilder.Entity<Libro>(entity =>
        {
            entity.HasKey(e => e.IdLibro);

            entity.ToTable("Libros", "Core");

            entity.Property(e => e.IdLibro).HasColumnName("id_Libro");
            entity.Property(e => e.AutorId).HasColumnName("Autor_id");
            entity.Property(e => e.CantidadEjemplares).HasColumnName("Cantidad_ejemplares");
            entity.Property(e => e.CategoriaId).HasColumnName("Categoria_id");
            entity.Property(e => e.Elimino)
                .HasComment("Atributo booleano que indicara si un registro este eliminado o no.")
                .HasColumnName("elimino");
            entity.Property(e => e.EstadoId)
                .HasComment("Atributo del estado en el que se encuentre el libro (PRESTADO, DISPONIBLE, etc).")
                .HasColumnName("Estado_id");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Atributo de auditoria que registrara la fecha en la que se cree un registro.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");
            entity.Property(e => e.FechaElim)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea eliminado (de forma lógica).")
                .HasColumnType("datetime")
                .HasColumnName("fecha_elim");
            entity.Property(e => e.FechaMod)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea modificado.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_mod");
            entity.Property(e => e.FechaPublicacion)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_publicacion");
            entity.Property(e => e.Isbn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ISBN");
            entity.Property(e => e.Titulo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioCreacionId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que cree un registro.")
                .HasColumnName("usuario_creacion_id");
            entity.Property(e => e.UsuarioElimId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que haya eliminado un registro de esta tabla.")
                .HasColumnName("usuario_elim_id");
            entity.Property(e => e.UsuarioMod)
                .HasComment("Atributo de auditoria que registrara que usuario por su id que modifique un registro.")
                .HasColumnName("usuario_mod");

            entity.HasOne(d => d.Autor).WithMany(p => p.Libros)
                .HasForeignKey(d => d.AutorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Libros_Autor");

            entity.HasOne(d => d.Categoria).WithMany(p => p.Libros)
                .HasForeignKey(d => d.CategoriaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Libros_Categoria");

            entity.HasOne(d => d.Estado).WithMany(p => p.Libros)
                .HasForeignKey(d => d.EstadoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Libros_Estado");

            entity.HasOne(d => d.UsuarioCreacion).WithMany(p => p.LibroUsuarioCreacions)
                .HasForeignKey(d => d.UsuarioCreacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Libros_UsuarioCreacionId");

            entity.HasOne(d => d.UsuarioElim).WithMany(p => p.LibroUsuarioElims)
                .HasForeignKey(d => d.UsuarioElimId)
                .HasConstraintName("FK_Libros_UsuarioElimId");
        });

        modelBuilder.Entity<Prestamo>(entity =>
        {
            entity.HasKey(e => e.IdPrestamo);

            entity.ToTable("Prestamos", "Core", tb => tb.HasComment("Identificador del usuario al cual se le realizara el prestamo (debe de ser un usuario de tipo estudiante)."));

            entity.Property(e => e.IdPrestamo)
                .HasComment("Identificador unico de cada prestamo")
                .HasColumnName("id_Prestamo");
            entity.Property(e => e.CodigoPrestamo)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Codigo de prestamo, debe ser un codigo unico por cada prestamo")
                .HasColumnName("Codigo_prestamo");
            entity.Property(e => e.Elimino)
                .HasComment("Atributo booleano que indicara si un registro este eliminado o no.")
                .HasColumnName("elimino");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Atributo de auditoria que registrara la fecha en la que se cree un registro.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");
            entity.Property(e => e.FechaDevolucion)
                .HasComment("Fecha estima en la que se deberia de entregar el libro prestado.")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_devolucion");
            entity.Property(e => e.FechaElim)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea eliminado (de forma lógica)")
                .HasColumnType("datetime")
                .HasColumnName("fecha_elim");
            entity.Property(e => e.FechaMod)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea modificado.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_mod");
            entity.Property(e => e.FechaPrestamo)
                .HasComment("Fecha en la que se realice el prestamo.")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_prestamo");
            entity.Property(e => e.FechaRealDevolucion)
                .HasComment("Fecha real en la que el usuario retorno el libro prestado.")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_real_devolucion");
            entity.Property(e => e.LibroId)
                .HasComment("Identificador del libro que se este prestando.")
                .HasColumnName("Libro_id");
            entity.Property(e => e.UsuarioCreacionId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que cree un registro.")
                .HasColumnName("usuario_creacion_id");
            entity.Property(e => e.UsuarioElimId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que haya eliminado un registro de esta tabla.")
                .HasColumnName("usuario_elim_id");
            entity.Property(e => e.UsuarioId)
                .HasComment("Identificador del usuario que realizara el prestamo (no debe ser un usuario de tipo administrador).")
                .HasColumnName("Usuario_id");
            entity.Property(e => e.UsuarioMod)
                .HasComment("Atributo de auditoria que registrara que usuario por su id que modifique un registro.")
                .HasColumnName("usuario_mod");

            entity.HasOne(d => d.Libro).WithMany(p => p.Prestamos)
                .HasForeignKey(d => d.LibroId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestamos_Libro");

            entity.HasOne(d => d.UsuarioCreacion).WithMany(p => p.PrestamoUsuarioCreacions)
                .HasForeignKey(d => d.UsuarioCreacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestamos_UsuarioCreacionId");

            entity.HasOne(d => d.UsuarioElim).WithMany(p => p.PrestamoUsuarioElims)
                .HasForeignKey(d => d.UsuarioElimId)
                .HasConstraintName("FK_Prestamos_UsuarioElimId");

            entity.HasOne(d => d.Usuario).WithMany(p => p.PrestamoUsuarios)
                .HasForeignKey(d => d.UsuarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestamos_UsuarioPrestamoId");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.IdRol);

            entity.ToTable("Roles", "Seguridad");

            entity.Property(e => e.IdRol)
                .ValueGeneratedOnAdd()
                .HasComment("Este atributo sera el identificador unico de los roles que se registren en esta tabla.")
                .HasColumnName("id_Rol");
            entity.Property(e => e.Elimino)
                .HasComment("Atributo booleano que indicara si un registro este eliminado o no.")
                .HasColumnName("elimino");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Atributo de auditoria que registrara la fecha en la que se cree un registro.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");
            entity.Property(e => e.FechaElim)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea eliminado (de forma lógica).")
                .HasColumnType("datetime")
                .HasColumnName("fecha_elim");
            entity.Property(e => e.FechaMod)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea modificado.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_mod");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del rol que se registre, que no puede exceder los 50 caracteres.");
            entity.Property(e => e.UsuarioCreacionId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que cree un registro.")
                .HasColumnName("usuario_creacion_id");
            entity.Property(e => e.UsuarioElimId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que haya eliminado un registro de esta tabla.")
                .HasColumnName("usuario_elim_id");
            entity.Property(e => e.UsuarioMod)
                .HasComment("Atributo de auditoria que registrara que usuario por su id que modifique un registro.")
                .HasColumnName("usuario_mod");

            entity.HasOne(d => d.UsuarioCreacion).WithMany(p => p.RoleUsuarioCreacions)
                .HasForeignKey(d => d.UsuarioCreacionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Roles_UsuarioCreacionId");

            entity.HasOne(d => d.UsuarioElim).WithMany(p => p.RoleUsuarioElims)
                .HasForeignKey(d => d.UsuarioElimId)
                .HasConstraintName("FK_Roles_UsuarioElimId");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario);

            entity.ToTable("Usuarios", "Seguridad");

            entity.Property(e => e.IdUsuario)
                .HasComment("Este atributo sera el identificador unico de los usuarios que se registren en esta tabla.")
                .HasColumnName("id_Usuario");
            entity.Property(e => e.Clave)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Este atributo sera la clave de los usuarios que se registren en esta tabla.");
            entity.Property(e => e.Correo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Este atributo sera el correo de los usuarios que se registren en esta tabla.");
            entity.Property(e => e.Elimino)
                .HasComment("Atributo booleano que indicara si un registro este eliminado o no.")
                .HasColumnName("elimino");
            entity.Property(e => e.FechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Atributo de auditoria que registrara la fecha en la que se cree un registro.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_creacion");
            entity.Property(e => e.FechaElim)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea eliminado (de forma lógica)")
                .HasColumnType("datetime")
                .HasColumnName("fecha_elim");
            entity.Property(e => e.FechaMod)
                .HasComment("Atributo de auditoria que registrara la fecha en la que un registro sea modificado.")
                .HasColumnType("datetime")
                .HasColumnName("fecha_mod");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Este atributo sera nombre de los usuarios que se registren en esta tabla.");
            entity.Property(e => e.RolId).HasColumnName("Rol_id");
            entity.Property(e => e.UsuarioCreacionId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que cree un registro.")
                .HasColumnName("usuario_creacion_id");
            entity.Property(e => e.UsuarioElimId)
                .HasComment("Atributo de auditoria que registrara el id del usuario que haya eliminado un registro de esta tabla.")
                .HasColumnName("usuario_elim_id");
            entity.Property(e => e.UsuarioMod)
                .HasComment("Atributo de auditoria que registrara que usuario por su id que modifique un registro.")
                .HasColumnName("usuario_mod");

            entity.HasOne(d => d.Rol).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.RolId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuarios_Rol");

            entity.HasOne(d => d.UsuarioElim).WithMany(p => p.InverseUsuarioElim)
                .HasForeignKey(d => d.UsuarioElimId)
                .HasConstraintName("FK_Usuarios_UsuarioElimId");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}